// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cardNumberExists = `-- name: CardNumberExists :one
SELECT EXISTS(
  SELECT 1
  FROM cards
  WHERE number = $1
) as exists
`

func (q *Queries) CardNumberExists(ctx context.Context, number string) (bool, error) {
	row := q.db.QueryRow(ctx, cardNumberExists, number)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCard = `-- name: CreateCard :exec
INSERT INTO cards (
  holder, number, title, type, currency
) VALUES ( $1, $2, $3, $4, $5 )
`

type CreateCardParams struct {
	Holder   pgtype.UUID
	Number   string
	Title    pgtype.Text
	Type     CardType
	Currency string
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.db.Exec(ctx, createCard,
		arg.Holder,
		arg.Number,
		arg.Title,
		arg.Type,
		arg.Currency,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, first_name, last_name, email, password
) VALUES ( $1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID        pgtype.UUID
	FirstName string
	LastName  string
	Email     string
	Password  []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, password 
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserCards = `-- name: GetUserCards :many
SELECT id, holder, number, title, balance, type, currency
FROM cards
WHERE holder = $1
`

func (q *Queries) GetUserCards(ctx context.Context, holder pgtype.UUID) ([]Card, error) {
	rows, err := q.db.Query(ctx, getUserCards, holder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Holder,
			&i.Number,
			&i.Title,
			&i.Balance,
			&i.Type,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTokens = `-- name: GetUserTokens :one
SELECT user_id, token, refresh_token
FROM tokens
WHERE user_id = $1
`

func (q *Queries) GetUserTokens(ctx context.Context, userID pgtype.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getUserTokens, userID)
	var i Token
	err := row.Scan(&i.UserID, &i.Token, &i.RefreshToken)
	return i, err
}

const saveUserTokens = `-- name: SaveUserTokens :exec
INSERT INTO tokens (
  user_id, token, refresh_token
) VALUES ( $1, $2, $3 )
ON CONFLICT ( user_id )
DO UPDATE SET 
  token = $2,
  refresh_token = $3
`

type SaveUserTokensParams struct {
	UserID       pgtype.UUID
	Token        []byte
	RefreshToken []byte
}

func (q *Queries) SaveUserTokens(ctx context.Context, arg SaveUserTokensParams) error {
	_, err := q.db.Exec(ctx, saveUserTokens, arg.UserID, arg.Token, arg.RefreshToken)
	return err
}
